/*/
 * Copyright (c) 2020 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *                                             Martin Jacquet - September 2020
 */
/* ---- Includes ---------------------------------------------------------- */
#pragma require "openrobots2-idl >= 2.0"
#pragma require "vision-idl"

#include "or/sensor/camera.gen"
#include "or/sensor/pixel.idl"

/* ---- Component declaration --------------------------------------------- */
component camviz {
    version         "1.0";
    email           "martin.jacquet@laas.fr";
    lang			"c";
    require         "genom3 >= 2.99.26";
    codels-require  "opencv";

    /* ---- Exceptions ---------------------------------------------------- */
    exception e_sys { short code; string<64> what; };

    /* ---- Ports --------------------------------------------------------- */
    port multiple in    or::sensor::frame   frame;
    port multiple in    or::sensor::pixel   pixel;

    /* ---- Types --------------------------------------------------------- */
    native recorder;

    typedef string<64> port_info;

    struct camera_s {
        port_info           name;
        recorder            rec;
        sequence<port_info> pixel_ports;
    };

    /* ---- IDS ----------------------------------------------------------- */
    ids {
        sequence<camera_s> cameras;

        float ratio;        // rescaling ratio, 0 is no display
        string<64> prefix;  // recording file prefix, '\0' is no record
        unsigned short pix_size;    // size of pixels to display
        unsigned short      orientation;
    };

    /* ---- Display task -------------------------------------------------- */
    task main {
        period 40 ms;
        throw e_sys;

        codel<start> viz_start(out ::ids)
            yield ether;
    };

    /* ---- Services ------------------------------------------------------ */
    activity add_camera(in string<64> port_name = : "Frame input subport") {
        doc "Starts the monitoring of a given camera frame stream.";
        task main;
        local unsigned short cam_id;

        codel<start> camera_start(in port_name, out cameras, out cam_id)
            yield main;
        codel<main> camera_main(in cam_id, in prefix, in ratio, in frame, in pixel, inout cameras, in pix_size, in orientation)
            yield pause::main;
        codel<stop> camera_stop(in cam_id, out cameras)
            yield ether;
    };

    attribute show(in ratio = 1 : "Ratio of image display") {
        doc "Set display ratio. Set to 0 to disable display.";
        throw e_sys;
        validate display_validate(local in ratio);
    };

    attribute record(in prefix = : "Prefix of recording files") {
        doc "Set recording prefix ratio.";
    };

    function stop_rec() {
        doc "Stops the recording of videos.";
        codel stop_rec(out prefix, out cameras);
    };

    activity add_pixel_display(in string<64> pixel_name = : "Name of the pixel input port",
                               in string<64> cam_name = : "Name of camera for the display") {
        doc "Add a subport to the pixels subport, in order to display it in the frame.";
        task main;
        throw e_sys;
        codel<start> add_pixel(in pixel_name, in cam_name, inout cameras)
            yield ether;
    };

    attribute set_pix_size(in pix_size = 3 : "(Positive) size of displayed pixel (radius of dot).");

    attribute set_orientation(in orientation = 0 : "0: 0째; 1: 90째; 2: 180째; 3: 270째") {
        doc "Set the rotation (clockwise) to apply to image before display.";
        validate set_orientation(local in orientation);
        throw e_sys;
    };

    function stop() {
        doc "Stops current running monitoring activities";
        interrupt all;
        codel stop(out prefix, out ratio);
    };
};
