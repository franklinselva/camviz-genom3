/*/
 * Copyright (c) 2020 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *                                             Martin Jacquet - September 2020
 */
/* ---- Includes ---------------------------------------------------------- */
#pragma require "openrobots2-idl >= 2.0"
#pragma require "vision-idl"

#include "or/sensor/camera.gen"
#include "or/sensor/pixel.idl"

/* ---- Component declaration --------------------------------------------- */
component camviz {
    version         "1.0";
    email           "martin.jacquet@laas.fr";
    lang			"c";
    require         "genom3 >= 2.99.26";
    codels-require  "opencv";

    /* ---- Interfaces ---------------------------------------------------- */
    uses or_camera;

    /* ---- Exceptions ---------------------------------------------------- */
    exception e_sys { short code; string<64> what; };

    /* ---- Ports --------------------------------------------------------- */
    // port in    or::sensor::frame   frame;
    port multiple in    or::sensor::pixel   pixel;
    /* interfaces ports:
     *  port in   or::sensor::frame         frame;
     *  port in   or::sensor::intrinsics    intrinsics; // unused
     *  port in   or::sensor::extrinsics    extrinsics; // unused
     */

    /* ---- Types --------------------------------------------------------- */
    native recorder;
    typedef string<64> port_info;

    /* ---- IDS ----------------------------------------------------------- */
    ids {
        struct img_size {
            unsigned short w;
            unsigned short h;
        } size;

        float ratio;
        recorder rec;
        boolean fov;

        string<64> win;

        sequence<port_info>  pixel_ports;
    };

    /* ---- Display task -------------------------------------------------- */
    task main {
        period 40 ms;
        throw e_sys;

        codel<start> viz_start(out ::ids)
            yield sleep;

        codel<sleep> viz_sleep(in frame, out size)
            yield pause::sleep, main;

        codel<main> viz_main(in pixel_ports, in ratio, in fov, in frame, in pixel, in win, inout rec)
            yield pause::main;

        codel<stop> viz_stop(in win, out rec, out ratio)
            yield ether;
    };

    /* ---- Services ------------------------------------------------------ */
    attribute show_fov(in fov) {
        doc "Toggle display of the circular FOV in the image frame.";
    };

    function disp_start(in float disp_ratio = 1: "Scale ratio for display",
                        in string<64> window = "camviz-genom3": "Name of display window") {
        codel display_start(in disp_ratio, in size, in window, out win, out ratio);
    };

    function disp_stop() {
        codel display_stop(in win, out ratio);
    };

    function rec_start(in string<128> path = "/tmp/camviz.avi": "Video files path") {
        codel record_start(in path, in size, out rec);
    };

    function rec_stop() {
        codel record_stop(out rec);
    };

    function add_pixel_display(in string<64> port_name = : "Name of the pixel input port") {
        doc "Add a subport to the pixels subport, in order to display it in the frame.";
        throw e_sys;
        codel add_pixel_display(in port_name, out pixel_ports);
    };
};
